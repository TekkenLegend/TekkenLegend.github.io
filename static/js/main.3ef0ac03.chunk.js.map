{"version":3,"sources":["Games.js","Translator.js","Output.js","App.js","serviceWorker.js","index.js"],"names":["Games","react_default","a","createElement","id","className","onChange","this","props","gameProp","value","currgameProp","label","Component","Translator","type","placeholder","valueProp","inputProp","Output","imageProp","comboHash","window","location","search","cHash","URL","document","searchParams","get","decodeURIComponent","gameHash","gHash","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","term","game","item","altImg","getElementsByTagName","sf_re","userinput","split","toLowerCase","querySelector","innerHTML","i","length","key","list","j","imgNum","image","img","src","String","hasOwnProperty","alt","appendChild","size","addEventListener","myAlt","setState","console","log","_this2","src_Games","event","target","src_Translator","src_Output","createImage","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ef0ac03.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Games extends Component \r\n{\r\n    render() \r\n    {\r\n        return(\r\n            <div id=\"games\">\r\n                <div className=\"select-field\">\r\n                    <select onChange={this.props.gameProp} value={this.props.currgameProp}>\r\n                        <option value=\"tekken\" label=\"US/EU Notation\">US/EU Notation</option>\r\n                        <option value=\"tekken\" label=\"Japanese Notation\">Japanese Notation</option>\r\n                        <option value=\"tekken\" label=\"Korean Notation\">Korean Notation</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Games;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Translator extends Component\r\n{\r\n\trender()\r\n\t{\r\n\t\treturn (\r\n\t\t\t<div id=\"translator\">\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"search\" \r\n\t\t\t\t\tplaceholder=\"Enter a notation! Example: df2,32,b21s!,qcf2\"\r\n\t\t\t\t\tvalue={this.props.valueProp}\r\n\t\t\t\t   \tonChange={this.props.inputProp}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default Translator;","import React, { Component } from 'react';\r\n\r\nclass Output extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div id=\"output\">\r\n\t\t\t\t<div className=\"images\">\r\n\t\t\t\t\t{this.props.imageProp}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n} \r\n\r\nexport default Output;","import React, { Component } from 'react';\nimport Games from './Games.js';\nimport Translator from './Translator.js';\nimport Output from './Output.js';\nimport './App.css';\nimport list from \"./list.json\"\n\n\nconst comboHash =()=>{\n    if (window && window.location.search){\n        const cParams = (new URL(document.location)).searchParams\n        const cHash = cParams.get(\"c\")\n        const cOut = decodeURIComponent(cHash)\n        return cOut\n    }\n    else{\n        return ''\n    }\n}\n\nconst gameHash =()=>{\n    if (window && window.location.search){\n        const gParams = (new URL(document.location)).searchParams\n        const gHash = gParams.get(\"g\")\n        const gOut = decodeURIComponent(gHash)\n        return gOut\n    }\n    else{\n        return 'tekken'\n    }\n}\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n\n        this.state={\n            term:'',\n            game: 'tekken'\n        }\n    }\n\n    createImage(){\n        let altImg = document.getElementsByTagName(\"img\")\n        //let tekken_re = /(\\(.*?\\))|\\s|(,)\\s*|\\+|(\\d\\+\\d\\+\\d\\+\\d|\\d\\+\\d\\+\\d|\\d\\+\\d|\\d)/\n        //let sf_re = /(tk)\\s*|\\s*(\\,|\\>|xx)\\s*|\\+|(\\(.*?\\))\\s*|\\-|\\./\n        let tekken_re = /\\s|(,)\\s*|\\+|(\\d\\+\\d\\+\\d\\+\\d|\\d\\+\\d\\+\\d|\\d\\+\\d|\\d)/\n        let sf_re = /(tk)\\s*|\\s*(\\,|\\>|xx)\\s*|\\+|\\-|\\./\n        let userinput = this.state.term\n        //let regex = /(\\(.*?\\))/\n        let item;\n        if (this.state.game === \"tekken\"){    \n            item = userinput.split(tekken_re);\n        } else if (this.state.game === \"dbfz\" || this.state.game === \"bbtag\"){\n            item = userinput.split(sf_re);\n        } else{\n            item = userinput.toLowerCase().split(sf_re);\n        }\n        if (document.querySelector(\".images\")){\n        document.querySelector(\".images\").innerHTML = \"\"\n            for(var i=0;i<item.length;i++){\n                for (var key in list[this.state.game]){\n                    for(var j=0;j<list[this.state.game][key].term.length;j++){\n                        if (list[this.state.game][key].term[j] === item[i]){\n                            for (var imgNum=0;imgNum<list[this.state.game][key].image.length;imgNum++){ \n                                let img = document.createElement(\"img\")\n                                img.src = String(list[this.state.game][key].image[imgNum])\n                                if(list[this.state.game][key].hasOwnProperty('alt')){\n                                    img.alt = String(list[this.state.game][key].alt[imgNum])\n                                }\n                                document.querySelector(\".images\").appendChild(img).className = String(list[this.state.game][key].size[imgNum])\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (altImg){\n            for (var j = 0; j < altImg.length;j++){\n                altImg[j].addEventListener('click',function show(){\n                    var myAlt = this.alt;\n                    document.querySelector(\"#text\").innerHTML = myAlt;\n                })\n            }\n        }\n    }\n    componentDidMount(){\n        this.setState({term: String(comboHash())})\n        this.setState({game: String(gameHash())})\n        console.log(gameHash())\n    }\n    render() {\n        return (\n            <div>\n                <div id=\"logo\"></div>\n                <div id=\"title\">Tekken Legend</div>\n                \n                <Games \n                    gameProp={event => this.setState({game: event.target.value})}\n                    currgameProp={this.state.game}\n                />\n                <Translator \n                    valueProp={this.state.term}\n                    inputProp={event => this.setState({term: event.target.value})}\n                />\n                <div id=\"text\"></div>\n                <Output imageProp={this.createImage()}/>\n            </div>\n        );\n    }\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}